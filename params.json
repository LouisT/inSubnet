{"name":"inSubnet","tagline":"Check an IP(v4 or v6) against a subnet.","body":"inSubnet (v0.0.5)\r\n======\r\n\r\nInstall: npm install [insubnet](https://npmjs.org/package/insubnet \"Title\")\r\n\r\nThis project is [Unlicensed](http://unlicense.org/ \"Title\").\r\nIn other words, I don't care what you do with it.\r\nHowever, if you make something interesting, I would like to check it out.\r\n\r\nBrowser example at [http://louist.github.io/inSubnet/example.html](http://louist.github.io/inSubnet/example.html \"Title\").\r\n\r\nFunctions:\r\n------\r\n    Examples in `./examples/` folder.\r\n\r\n    inSubnet.Auto(ip, subnet[, mask]) - Check to find out if <ip> is in <subnet>. Works with IPv4 and IPv6. Returns boolean.\r\n\r\n         Examples: inSubnet.Auto('1.2.3.4','1.2.0.0/16'); // true\r\n                   inSubnet.Auto('1.2.3.4','1.2.0.0','16'); // true\r\n                   inSubnet.Auto('1.4.3.4','1.2.0.0','16'); // false\r\n\r\n    inSubnet.IPv4(ip, subnet[, mask]) - Same as \"Auto()\" but for IPv4 only. - Returns boolean.\r\n\r\n         Examples: See \"Auto()\" examples.\r\n\r\n    inSubnet.IPv6(ip, subnet[, mask]) - Same as \"Auto()\" but for IPv6 only. - Returns boolean.\r\n\r\n         Examples: inSubnet.IPv6('2400:cb00::123','2400:cb00::/32'); // true\r\n                   inSubnet.IPv6('2400:cb00::123','2400:cb00::','32'); // true\r\n                   inSubnet.IPv6('2500:cb00::123','2400:cb00::','32'); // false\r\n\r\n    inSubnet.isIP(string) - Check if <string> is an IP address. Works for IPv6 and IPv4. - Returns boolean.\r\n\r\n         Examples: inSubnet.isIP(\"127.0.0.1\"); // true\r\n                   inSubnet.isIP(\"afd::1\"); // true\r\n                   inSubnet.isIP(\"asd::1\"); // false\r\n \r\n    inSubnet.isIPv4(string) - Same as \"isIP()\" but for IPv4 only. - Returns boolean.\r\n         Examples: inSubnet.isIPv4(\"127.0.0.1\"); // true\r\n                   inSubnet.isIPv4(\"127.0.0.256\"); // false\r\n\r\n    inSubnet.isIPv6(string) - Same as \"isIP()\" but for IPv6 only. - Returns boolean.\r\n\r\n         Examples: inSubnet.isIPv6(\"adf::1\"); // true\r\n                   inSubnet.isIPv6(\"asf::1\"); // false\r\n\r\n    inSubnet.Expand(ipv6) - Expands an IPv6. - Returns IPv6 or false.\r\n\r\n         Examples: inSubnet.Expand(\"afd::1\"); // 0afd:0000:0000:0000:0000:0000:0000:0001\r\n                   inSubnet.Expand(\"2001:4860:4860::8888\"); // 2001:4860:4860:0000:0000:0000:0000:8888\r\n\r\n    inSubnet.Validate(ip[, subnets]) - Check <ip> or an Array of IPs against an array of subnets set by \"setSubnets()\".\r\n                                       If <subnets> is passed, uses \"setSubnets()\". - Returns boolean or an Array of boolean.\r\n\r\n         Examples: inSubnet.Validate('127.0.0.1',['127.0.0.1/32','adf::1/32']);  // true\r\n                   inSubnet.Validate(['127.0.0.1','127.0.0.2'],['127.0.0.1/32']); // [true,false]\r\n\r\n    inSubnet.Filter(array[, subnets]) - Filter an Array of IP addresses against subnets set with \"setSubnets()\".\r\n                                        If <subnets> is passed, uses \"setSubnets()\". - Returns IP or false, Array of valid IPs.\r\n\r\n         Examples: inSubnet.Filter(['127.0.0.1','adf::1','127.0.0.2'],['127.0.0.1/32','adf::1/32']); // ['127.0.0.1','adf::1']\r\n                   inSubnet.Filter('127.0.0.1',['127.0.0.1/32','adf::1/32']); // 127.0.0.1\r\n                   inSubnet.Filter('127.0.0.2',['127.0.0.1/32','adf::1/32']); // false\r\n\r\n    inSubnet.Clean(array[, filter[, sort]]) - Filter an array of IPs/subnets and return only valid IPs. Used in \"setSubnets()\".\r\n                                              <filter> is the function to pass to \"Array.filter()\".\r\n                                              <sort> is the function to pass to \"Array.sort()\" - Returns Object or false.\r\n                                              NOTE: \"Array.filter()\" and \"Array.sort()\" are ran LAST after validating and expanding.\r\n\r\n         Examples: inSubnet.Clean(['127.0.0.2','127.0.0.29/32']); // {ipv4:['127.0.0.2','127.0.0.29/32'],ipv6:[]}\r\n                   inSubnet.Clean(['127.0.0.1','adf::1']); // {ipv4:['127.0.0.1'],ipv6:['0adf:0000:0000:0000:0000:0000:0000:0001']}\r\n                   inSubnet.Clean(['adf::1','::1']); // {ipv4:[],ipv6:['0000:0000:0000:0000:0000:0000:0000:0001','0adf:0000:0000:0000:0000:0000:0000:0001']}\r\n                   inSubnet.Clean(['not an IP','subnet/23','asd::1']); // false\r\n\r\n    inSubnet.setSubnets(subnets) - Set a list of subnets for \"Validate()\".\r\n                                   WARNING: Overrides all previous \"setSubnets()\" calls. - Returns boolean.\r\n\r\n         Examples: inSubnet.setSubnets([\"192.168.1.0/30\",\"::1/32\"]); // true\r\n                   inSubnet.setSubnets([\"not\",\"subnets\",\"subnet/32\"]); // false\r\n\r\nTODO:\r\n------\r\n- [x] Figure out what should be in the TODO and then write it! (Done!?)\r\n- [ ] Write a better README! (Is this happening?)\r\n- [x] Write a simple HTTP example for CloudFlare. (Look in ./examples/cloudflare.js)\r\n- [ ] Make \"Exporter\" better.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}